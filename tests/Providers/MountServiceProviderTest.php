<?php

/**
 * @author simon <crcms@crcms.cn>
 * @datetime 2019-01-19 21:22
 * @link http://crcms.cn/
 * @copyright Copyright &copy; 2019 Rights Reserved CRCMS
 */

namespace CrCms\Microservice\Tests\Providers;

use PHPUnit\Framework\TestCase;
use Illuminate\Cache\ArrayStore;
use Illuminate\Config\Repository;
use Illuminate\Container\Container;
use Illuminate\Translation\Translator;
use Illuminate\Console\Scheduling\Schedule;
use CrCms\Microservice\Foundation\MountServiceProvider;

/**
 * Class MountServiceProviderTest.
 */
class MountServiceProviderTest extends TestCase
{
    public static $basePath = __DIR__.'/../tmp/modules/Testing';

    public static function setUpBeforeClass()
    {
        // TODO: Change the autogenerated stub
        parent::setUpBeforeClass();

        static::prepareDirectory();
    }

    /**
     * @return void
     */
    protected static function prepareDirectory(): void
    {
        $basePath = static::$basePath;

        $directories = [
            'Schedules', 'Config', 'Commands', 'Providers', 'Translations', 'Migrations',
        ];

        foreach ($directories as $directory) {
            $directory = $basePath.'/'.$directory;
            if (! is_dir($directory)) {
                mkdir($directory, 777, true);
            }
        }

        copy(__DIR__.'/stub/config.php', $basePath.'/Config/config.php');
        copy(__DIR__.'/stub/TestCommand.php', $basePath.'/Commands/TestCommand.php');
        copy(__DIR__.'/stub/lang.php', $basePath.'/Translations/en/lang.php');
        copy(__DIR__.'/stub/TestSchedule.php', $basePath.'/Schedules/TestSchedule.php');
    }

    public function testConfigLoad()
    {
        $app = new Container();

        $app::setInstance($app);

        $app = \Mockery::mock($app);
        $app->shouldReceive('modulePath')->andReturn(dirname(static::$basePath));
        $app->singleton('config', function () {
            return new Repository();
        });
        $app->singleton('translator', function () {
            //return new Translator(new FileLoader($app['files'], $app['path.lang']);
            $translator = \Mockery::mock(Translator::class);
            $translator->shouldReceive('addNamespace');

            return $translator;
        });

        $app->singleton('cache', function ($app) {
            return new \Illuminate\Cache\Repository(new ArrayStore());
        });

        $app->shouldReceive('make')->with(Schedule::class)->andReturn(\Mockery::mock(Schedule::class));
        $schedule = \Mockery::mock(\CrCms\Microservice\Tests\tmp\modules\Testing\Schedules\TestSchedule::class);
        $schedule->shouldReceive('handle');
        $app->shouldReceive('make')->with(\CrCms\Microservice\Tests\tmp\modules\Testing\Schedules\TestSchedule::class)->andReturn($schedule);

        $mountServiceProvider = new MountServiceProvider($app);

        $mountServiceProvider->register();
        $mountServiceProvider->boot();

        // @todo 暂时只测试了一个config
        $this->assertEquals($app['config']->get('testing.config'), 'test');
    }
}

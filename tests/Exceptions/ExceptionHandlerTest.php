<?php

/**
 * @author simon <crcms@crcms.cn>
 * @datetime 2019-03-21 07:07
 *
 * @link http://crcms.cn/
 *
 * @copyright Copyright &copy; 2019 Rights Reserved CRCMS
 */

namespace CrCms\Microservice\Tests\Exceptions;

use CrCms\Microservice\Foundation\Exceptions\ExceptionHandler;
use CrCms\Microservice\Foundation\Exceptions\ServiceException;
use CrCms\Microservice\Foundation\Exceptions\UnauthorizedException;
use CrCms\Microservice\Foundation\Exceptions\UnprocessableEntityException;
use CrCms\Microservice\Server\Contracts\RequestContract;
use CrCms\Microservice\Tests\ApplicationTrait;
use Illuminate\Config\Repository;
use Illuminate\Http\JsonResponse;
use PHPUnit\Framework\TestCase;

class ExceptionHandlerTest extends TestCase
{
    use ApplicationTrait;

    public function setUp()
    {
        // TODO: Change the autogenerated stub
        parent::setUp();
        static::$app->singleton('config',function(){
            return new Repository([
                'exception' => require __DIR__.'/../../config/exception.php',
            ]);
        });
    }

    public function testServiceExceptionRender()
    {
        $exception = new ServiceException("message", 500);

        $handler = new ExceptionHandler(static::$app);
        $result = $handler->render(\Mockery::mock(RequestContract::class),$exception);

        $this->assertInstanceOf(JsonResponse::class,$result);
        $this->assertEquals(500,$result->getStatusCode());
        $this->assertEquals('message',$result->getData(true)['message']);
    }

    public function testSubclassServiceExceptionRender()
    {
        $exception = new UnauthorizedException("message");

        $handler = new ExceptionHandler(static::$app);
        $result = $handler->render(\Mockery::mock(RequestContract::class),$exception);

        $this->assertInstanceOf(JsonResponse::class,$result);
        $this->assertEquals(401,$result->getStatusCode());
        $this->assertEquals('message',$result->getData(true)['message']);
    }

    public function testCustomExceptionRender()
    {
        $exception1 = new ResourceException('message');

        $exception2 = new ResourceNotFoundException('message');

        static::$app->make('config')->set('exception.conversion',[
            get_class($exception1),
            get_class($exception2) => UnprocessableEntityException::class
        ]);

        $this->assertEquals(403,$exception1->getStatusCode());
        $this->assertEquals('message',$exception1->getMessage());


        $handler = new ExceptionHandler(static::$app);
        $result = $handler->render(\Mockery::mock(RequestContract::class),$exception1);
        $this->assertInstanceOf(JsonResponse::class,$result);
        //其实应该是403，因为method_exists Mockery不出来，直接获取是可以的
        $this->assertEquals(403,$result->getStatusCode());
        $this->assertEquals('message',$result->getData(true)['message']);

        $handler = new ExceptionHandler(static::$app);
        $result = $handler->render(\Mockery::mock(RequestContract::class),$exception2);
        $this->assertInstanceOf(JsonResponse::class,$result);
        //其实应该是403，因为method_exists Mockery不出来，直接获取是可以的
        $this->assertEquals(422,$result->getStatusCode());
        $this->assertEquals('message',$result->getData(true)['message']);
    }
}
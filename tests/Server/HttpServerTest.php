<?php

namespace CrCms\Microservice\Tests\Server;

use CrCms\Foundation\Transporters\DataProvider;
use CrCms\Microservice\Bridging\BridgingServiceProvider;
use CrCms\Microservice\Foundation\Kernel;
use CrCms\Microservice\Server\Contracts\ResponseContract;
use CrCms\Microservice\Server\Http\Events\RequestEvent;
use CrCms\Microservice\Server\Http\Request;
use CrCms\Microservice\Server\Http\Response;
use CrCms\Microservice\Tests\ApplicationTrait;
use PHPUnit\Framework\TestCase;

class HttpServerTest extends TestCase
{
    use ApplicationTrait;

    public function setUp()
    {
        // TODO: Change the autogenerated stub
        parent::setUp();

        static::$app->make('config')->set([
            'app.key' => 'base64:Bey9po1NfR9CHY65KxPqQIemqvhDfHLNTFeffewn3pY='
        ]);
    }

    public function testRequest()
    {
        /* @var Kernel $kernel */
        $kernel = static::$app->make(Kernel::class);

        $data = [
            'call' => 'test',
            'data' => ['x' => 1]
        ];

        static::$app->bind('response', function () {
            return new Response();
        });

        $provider = new BridgingServiceProvider(static::$app);
        $provider->register();
        $provider->boot();

        $string = static::$app->make('bridging.packer')->pack($data);

        $swooleRequest = \Mockery::mock(\Swoole\Http\Request::class);
        $swooleRequest->shouldReceive('rawContent')->andReturn($string);

        $swooleRequestEvent = \Mockery::mock(RequestEvent::class);
        $swooleRequestEvent->shouldReceive('getSwooleRequest')->andReturn($swooleRequest);

        $server = \Mockery::mock('server');
        $server->request = $swooleRequestEvent;
        static::$app->instance('server', $server);


        $illuminateRequest = \Illuminate\Http\Request::capture();
        $illuminateRequest = \Mockery::mock($illuminateRequest);
        $illuminateRequest->shouldReceive('getContent')->andReturn($string);
        $request = new Request(static::$app, $illuminateRequest);
        $request = \Mockery::mock($request);
        $request->shouldReceive('rawContent')->andReturn($string);

        $response = $kernel->handle(
            $request
        );

        $this->assertInstanceOf(ResponseContract::class, $response);

        $stringData = $response->getContent();


        $result = static::$app->make('bridging.packer')->unpack($stringData);

        $this->assertEquals(true, is_array($result));
        $this->assertEquals(1, $result['data']['z']);
    }

//    public function testRequestAndNotValue()
//    {
//
//    }
}
